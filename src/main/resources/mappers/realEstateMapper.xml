<?xml version="1.0" encoding="UTF-8"?>

<!-- 우리가 만든 xml에는 mybatis 프레임 워크 기반으로 동작하는 거기 때문에 xml의 태그 규칙을 
	mybatis 에서 정의해 놓은 dtd를 통해 만들어 갈거임-->

<!-- 해당 하는 dtd를 포함시키는 태그 구성 / 이걸 적용하는 순가 xml 에는 태그 규칙이 만들어지는거임( 그 규칙에 맞지 않으면 에러 표시남 )-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- dtd 규칙에 따라 태그 구성 해주면 됨 / mapper xml 자체는 repository 인터페이스와 매칭 되도록 구성할거임 -->
<mapper namespace="com.jinju.spring.test.mybatis.repository.RealEstateRepository">
	<select id="selectRealEstate" parameterType="int"
	resultType="com.jinju.spring.test.mybatis.domain.RealEstate">
		SELECT
			`id`
			, `realtorId`
			, `address`
			, `area`
			, `type`
			, `price`
			, `rentPrice`
			, `createdAt`
			, `updatedAt`
		FROM
			`real_estate`
		WHERE
			`id` = #{id}
	</select>
	
	<!-- 리턴 타입은 리스트는 select에서 항상 있을 수 있는 형태이기 때문에 리스트인거를 명시 할 필요는 없다 -->
	<select id="selectRealEstateListByRentPrice" parameterType="int"
	resultType="com.jinju.spring.test.mybatis.domain.RealEstate">
		SELECT
			`id`
			, `realtorId`
			, `address`
			, `area`
			, `type`
			, `price`
			, `rentPrice`
			, `createdAt`
			, `updatedAt`
		FROM
			`real_estate`
		WHERE
			<![CDATA[`rentPrice` < #{rent}]]>
			<!-- CDATA 라는게 머냐면 xml 안에서 xml 문법 으로 사용 되지 않을 부분을 이걸로 묶어 주면 이 안에 포함 될 녀석들은 xml 문법으로 적용이 안돼서 그거 그대로 표현 된다 -->
	</select>
	<select id="selectRealEstateListByAreaAndPrice" parameterType="int"
	resultType="com.jinju.spring.test.mybatis.domain.RealEstate">
		SELECT
			`id`
			, `realtorId`
			, `address`
			, `area`
			, `type`
			, `price`
			, `rentPrice`
			, `createdAt`
			, `updatedAt`
		FROM
			`real_estate`
		WHERE
			<!-- #{area} 이거는 이 repository 메소드에 전달 된 값을 파람 어노테이션을 통해 매칭 시켜 놓은 거임 -->
			<![CDATA[
			`type` = '매매'
			AND `area` >= #{area} 
			AND `price` <= #{price}]]>
	</select>
	<insert id="insertRealEstateByObject" 
	parameterType="com.jinju.spring.test.mybatis.domain.RealEstate">
	<!-- insert에서 resultType은 int로 고정 되어 있음 도리어 건들면 안됨 그래서 속성 자체가 없음 -->	
		INSERT INTO
			`real_estate`
		(
			 `realtorId`
			, `address`
			, `area`
			, `type`
			, `price`
			, `rentPrice`	
		)
		VALUE
		(
			<!--
				위에 나열한 컬럼에 매칭 되는 값들이 들어 가면 되는데 
				이 값들은 여기서 직접 입려하는게 아니라 지금 호출되는 insertRealEstateByObject 이 메소드로 
				전달 되는 값으로 매칭 시켜서 호출한 쪽에서 원하는 값이 저장 될 수 있도록 할거다
				그런데 그 파라미터 형태가 뭐다?? 클래스임 RealEstate 클래스에 있는 멤버 변수에 저장된 값을 쿼리를 완성시키는데 사용할 수 있다.
				#{}사이에 파라미터 타입에 명시한 클래스의 멤버 변수 이름을 지정해주면 전달된 객체에 멤버 변수 값이 이 쿼리를 완성 시킴
				괄호 사이에 들어 있는 값 정확한 의미는 이 파라미터 타입에 대응되는 RealEstate클래스의 멤버 변수 이름이다.
			-->
			#{realtorId}
			, #{address}
			, #{area}
			, #{type}
			, #{price}
			, #{rentPrice}
		)
		
	</insert>
	<!-- parameterType 여러개였고 타입이 서로 다 달랐다 그러면 map으로 하기 
	내부적으로 해당 하는 파라미터들을 map으로 구성해서 key, value 형태로 매칭해서 여기서 쓸 수 있도록 
	구성해 주는 거고 우리는 그걸 알고 메소드에 타입이 여러개면 map 이렇게 생각해주면 됨 
	-->
	<insert id="insertRealEstate" parameterType="map">
		INSERT INTO
			`real_estate`
		(
			 `realtorId`
			, `address`
			, `area`
			, `type`
			, `price`
			, `rentPrice`	
		)
		VALUE
		(
			<!-- 메소드에서 파라미터로 전달 받은 값이 여기에 채워져야 함 
				 #{} 안에 들어갈 키워드는 메소드에 Param 어노테이션에 매칭된 키워드를 통해서 여기에 매칭된 변수값이 이 위치에 들어감
			-->
			#{realtorId}
			, #{address}
			, #{area}
			, #{type}
			, #{price}
			, #{rentPrice}
			
		)
	</insert>
	
	<!--
		parameterType은 여러개고 타입이 다 다르니깐 map 으로 지정
		resultType이라는 속성은 insert, update, delete 모두 int로 고정
		그래서 타입을 수정 자체를 할 수가 없고 속성 자체가 없다.
	-->
	<update id="updateRealEstate" parameterType="map">
		UPDATE 
			`real_estate`
		SET
			`type` = #{type}
		    , `price` = #{price}
		    , `updatedAt` = now()
		WHERE
			`id` = #{id};
	</update>
	
	<delete id="deleteRealEstate" parameterType="int">
		DELETE FROM
			`real_estate`
		WHERE
			`id` = #{id};
	</delete>
</mapper>